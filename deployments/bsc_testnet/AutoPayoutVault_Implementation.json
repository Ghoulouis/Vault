{
  "address": "0xcd1d13E627a7aC7D0961E66bac310ea02687F045",
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "particapantIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OfferAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenPayout",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPayout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPayout",
          "type": "uint256"
        }
      ],
      "name": "OfferOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extraPayout",
          "type": "uint256"
        }
      ],
      "name": "OfferUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "particapantIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "particapantIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_id",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_index",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_reward",
          "type": "uint256[]"
        }
      ],
      "name": "AddRewardParticapants",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "acceptOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "closeOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "offers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenPayout",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "particapantCounter",
          "type": "uint256"
        },
        {
          "internalType": "enum IAutoPayoutVault.OfferStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_tokenPayout",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPayout",
          "type": "uint256"
        }
      ],
      "name": "openOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "particapants",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "enum IAutoPayoutVault.ParticapantStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_extraPayout",
          "type": "uint256"
        }
      ],
      "name": "upgradeOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x274f84d81350340a669fefe986ba9cdc505b6fe2a7689e802193d8d8da99ad1a",
  "receipt": {
    "to": null,
    "from": "0x48d66a65693dB44d3ca05CBb54e0a806096e2eDA",
    "contractAddress": "0xcd1d13E627a7aC7D0961E66bac310ea02687F045",
    "transactionIndex": 4,
    "gasUsed": "1578033",
    "logsBloom": "0x
    "blockHash": "0xde5716dc18766fdc3a53b91d272ee760f82b9eccbe372612c12286685928afa7",
    "transactionHash": "0x274f84d81350340a669fefe986ba9cdc505b6fe2a7689e802193d8d8da99ad1a",
    "logs": [],
    "blockNumber": 46792399,
    "cumulativeGasUsed": "2290723",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9423370b663f0cc7d4ed565d98fbf4e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"particapantIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenPayout\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPayout\",\"type\":\"uint256\"}],\"name\":\"OfferOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraPayout\",\"type\":\"uint256\"}],\"name\":\"OfferUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"particapantIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"particapantIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_id\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_index\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reward\",\"type\":\"uint256[]\"}],\"name\":\"AddRewardParticapants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"closeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPayout\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"particapantCounter\",\"type\":\"uint256\"},{\"internalType\":\"enum IAutoPayoutVault.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenPayout\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPayout\",\"type\":\"uint256\"}],\"name\":\"openOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"particapants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"enum IAutoPayoutVault.ParticapantStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_extraPayout\",\"type\":\"uint256\"}],\"name\":\"upgradeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AutoPayoutVault.sol\":\"AutoPayoutVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/AutoPayoutVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IAutoPayoutVault.sol\\\";\\n\\ncontract AutoPayoutVault is\\n    IAutoPayoutVault,\\n    ReentrancyGuardUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public immutable MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    mapping(bytes32 => Offer) public offers;\\n    mapping(bytes32 => mapping(uint256 => Particapant)) public particapants;\\n\\n    function initialize() public initializer {\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MANAGER_ROLE, msg.sender);\\n    }\\n\\n    function openOffer(\\n        bytes32 _id,\\n        address _tokenPayout,\\n        uint256 _totalPayout,\\n        uint256 _minPayout\\n    ) public {\\n        Offer storage offer = offers[_id];\\n        require(\\n            offer.status == OfferStatus.NOT_EXIST,\\n            \\\"AP01: offer already exists\\\"\\n        );\\n        _tranferIn(_tokenPayout, _totalPayout);\\n        offer.id = _id;\\n        offer.addr = msg.sender;\\n        offer.tokenPayout = _tokenPayout;\\n        offer.totalPayout = _totalPayout;\\n        offer.minPayout = _minPayout;\\n        offer.balance = _totalPayout;\\n        offer.particapantCounter = 0;\\n        offer.status = OfferStatus.OPEN;\\n\\n        emit OfferOpened(\\n            _id,\\n            msg.sender,\\n            _tokenPayout,\\n            _totalPayout,\\n            _minPayout\\n        );\\n    }\\n\\n    function upgradeOffer(bytes32 _id, uint256 _extraPayout) public {\\n        Offer storage offer = offers[_id];\\n        require(offer.status == OfferStatus.OPEN, \\\"AP03: offer is not open\\\");\\n        _tranferIn(offer.tokenPayout, _extraPayout);\\n        offer.totalPayout += _extraPayout;\\n        offer.balance += _extraPayout;\\n\\n        emit OfferUpgraded(_id, _extraPayout);\\n    }\\n\\n    function acceptOffer(bytes32 _id) public {\\n        Offer storage offer = offers[_id];\\n        require(offer.status == OfferStatus.OPEN, \\\"AP03: offer is not open\\\");\\n        for (uint256 i = 0; i < offer.particapantCounter; i++) {\\n            require(\\n                particapants[_id][i].addr != msg.sender,\\n                \\\"AP04: already accepted\\\"\\n            );\\n        }\\n        require(\\n            offer.totalPayout >=\\n                offer.minPayout * (offer.particapantCounter + 1),\\n            \\\"AP05: full particapants\\\"\\n        );\\n        particapants[_id][offer.particapantCounter] = Particapant({\\n            addr: msg.sender,\\n            reward: 0,\\n            status: ParticapantStatus.ACCEPTED\\n        });\\n        offer.particapantCounter++;\\n\\n        emit OfferAccepted(_id, offer.particapantCounter - 1, msg.sender);\\n    }\\n\\n    function AddRewardParticapants(\\n        bytes32[] calldata _id,\\n        uint256[] calldata _index,\\n        uint256[] calldata _reward\\n    ) public {\\n        require(hasRole(MANAGER_ROLE, msg.sender), \\\"AP06: not manager\\\");\\n        for (uint256 i = 0; i < _id.length; i++) {\\n            _addRewardParticapant(_id[i], _index[i], _reward[i]);\\n        }\\n    }\\n\\n    function claimReward(bytes32 _id) public {\\n        Offer storage offer = offers[_id];\\n        for (uint256 i = 0; i < offer.particapantCounter; i++) {\\n            Particapant storage particapant = particapants[_id][i];\\n            if (particapant.addr == msg.sender) {\\n                require(\\n                    particapant.status == ParticapantStatus.ACCEPTED,\\n                    \\\"AP11: not accepted status\\\"\\n                );\\n                require(particapant.reward > 0, \\\"AP12: reward is zero\\\");\\n                _tranferOut(offer.tokenPayout, msg.sender, particapant.reward);\\n                particapant.status = ParticapantStatus.CLAIMED;\\n\\n                emit RewardClaimed(_id, i, msg.sender, particapant.reward);\\n                return;\\n            }\\n        }\\n    }\\n\\n    function closeOffer(bytes32 _id) public {\\n        Offer storage offer = offers[_id];\\n        require(offer.status == OfferStatus.OPEN, \\\"AP07: offer is not open\\\");\\n        require(offer.addr == msg.sender, \\\"AP10: not owner\\\");\\n        _tranferOut(offer.tokenPayout, msg.sender, offer.balance);\\n        offer.status = OfferStatus.CLOSED;\\n    }\\n\\n    function _tranferIn(address token, uint256 amount) internal {\\n        if (token == address(0)) {\\n            require(msg.value == amount, \\\"AP02: invalid amount\\\");\\n        } else {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function _tranferOut(address token, address to, uint256 amount) internal {\\n        if (token == address(0)) {\\n            payable(to).transfer(amount);\\n        } else {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    function _addRewardParticapant(\\n        bytes32 _id,\\n        uint256 _index,\\n        uint256 _reward\\n    ) internal {\\n        Offer storage offer = offers[_id];\\n\\n        require(offer.status == OfferStatus.OPEN, \\\"AP07: offer is not open\\\");\\n        require(\\n            particapants[_id][_index].status == ParticapantStatus.ACCEPTED,\\n            \\\"AP08: not accepted status\\\"\\n        );\\n        require(_reward <= offer.minPayout, \\\"AP09: invalid reward\\\");\\n        offer.balance = offer.balance - _reward;\\n        particapants[_id][_index].reward += _reward;\\n\\n        emit RewardUpdated(_id, _index, _reward);\\n    }\\n}\\n\",\"keccak256\":\"0xc918349ce33ca216b68c4b039fa655778f7bc3288001068f6e8520fdb09c0ff8\",\"license\":\"MIT\"},\"contracts/interfaces/IAutoPayoutVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IAutoPayoutVault {\\n    enum OfferStatus {\\n        NOT_EXIST,\\n        OPEN,\\n        CLOSED\\n    }\\n\\n    enum ParticapantStatus {\\n        NOT_EXIST,\\n        ACCEPTED,\\n        CLAIMED,\\n        REJECTED\\n    }\\n\\n    struct Particapant {\\n        address addr;\\n        uint256 reward;\\n        ParticapantStatus status;\\n    }\\n\\n    struct Offer {\\n        bytes32 id;\\n        address addr;\\n        address tokenPayout;\\n        uint256 totalPayout;\\n        uint256 minPayout;\\n        uint256 balance;\\n        uint256 particapantCounter;\\n        OfferStatus status;\\n    }\\n\\n    event OfferOpened(\\n        bytes32 indexed id,\\n        address indexed addr,\\n        address indexed tokenPayout,\\n        uint256 totalPayout,\\n        uint256 minPayout\\n    );\\n\\n    event OfferUpgraded(bytes32 indexed id, uint256 extraPayout);\\n\\n    event OfferAccepted(\\n        bytes32 indexed id,\\n        uint256 indexed particapantIndex,\\n        address indexed addr\\n    );\\n\\n    event RewardUpdated(\\n        bytes32 indexed id,\\n        uint256 indexed particapantIndex,\\n        uint256 reward\\n    );\\n\\n    event RewardClaimed(\\n        bytes32 indexed id,\\n        uint256 indexed particapantIndex,\\n        address indexed addr,\\n        uint256 reward\\n    );\\n}\\n\",\"keccak256\":\"0xe26489edd65aad9ade09192f630943e87e6157e45d8ee347199867d5aec33df4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523461005a576100327f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08608052565b604051611b9161006082396080518181816106d101528181610d440152610f4b0152611b9190f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146101225780630ae9b5781461011d57806312c961d514610118578063248a9ca3146101135780632f2ff15d1461010e57806336568abe14610109578063474d3ff0146101045780638129fc1c146100ff57806391d14854146100fa5780639cc2f88c146100f5578063a217fddf146100f0578063a29765a1146100eb578063aabb22c1146100e6578063b596a15e146100e1578063d547741f146100dc578063ec87621c146100d75763f54140230361013a576106f5565b6106bc565b6106a3565b61068b565b61066c565b6105a1565b6104f7565b6104c0565b6104a4565b61048c565b61044a565b6102ea565b6102d1565b610282565b610255565b610211565b610169565b6001600160e01b031981165b0361013a57565b600080fd5b9050359061014c82610127565b565b9060208282031261013a576101629161013f565b90565b9052565b3461013a5761019661018461017f36600461014e565b61070d565b60405191829182901515815260200190565b0390f35b80610133565b9050359061014c8261019a565b6001600160a01b031690565b6001600160a01b038116610133565b9050359061014c826101b9565b60808183031261013a576101e982826101a0565b926101626101fa84602085016101c8565b9361020881604086016101a0565b936060016101a0565b3461013a5761022d6102243660046101d5565b92919091610846565b604051005b919060408382031261013a576101629061024c81856101a0565b936020016101a0565b3461013a5761022d610268366004610232565b906109bc565b9060208282031261013a57610162916101a0565b3461013a5761019661029d61029836600461026e565b610a76565b6040515b9182918290815260200190565b919060408382031261013a57610162906102c881856101a0565b936020016101c8565b3461013a5761022d6102e43660046102ae565b90610ac9565b3461013a5761022d6102fd3660046102ae565b90610ad3565b905b600052602052604060002090565b6101629081565b6101629054610313565b610162905b60ff1690565b6101629054610324565b610344906000610303565b9061034e8261031a565b9161036360018201546001600160a01b031690565b9161037860028301546001600160a01b031690565b916103856003820161031a565b916103926004830161031a565b9161039f6005820161031a565b9161016260076103b16006850161031a565b930161032f565b634e487b7160e01b600052602160045260246000fd5b600311156103d857565b6103b8565b9061014c826103ce565b610162906103dd565b610165906103e7565b9081526001600160a01b039091166020820152610100810197969590949093909290916001600160a01b031660408601526060850152608084015260a083015260c082015260e00161014c916103f0565b3461013a5761019661046561046036600461026e565b610339565b9461047898969894919493929360405190565b988998896103f9565b600091031261013a57565b3461013a5761049c366004610481565b61022d610d68565b3461013a576101966101846104ba3660046102ae565b90610d7a565b3461013a5761022d6104d336600461026e565b610e3a565b6101626101626101629290565b61016260006104d8565b6101626104e5565b3461013a57610507366004610481565b61019661029d6104ef565b90610305906104d8565b9061052b610530926001610303565b610512565b80546001600160a01b03169161016260026103b16001850161031a565b600411156103d857565b9061014c8261054d565b61016290610557565b61016590610561565b6001600160a01b03909116815260608101939261014c92909160409161059a906020830152565b019061056a565b3461013a576101966105bd6105b7366004610232565b9061051c565b60405191939193849384610573565b909182601f8301121561013a5781359167ffffffffffffffff831161013a57602001926020830284011161013a57565b9060608282031261013a57813567ffffffffffffffff811161013a57816106249184016105cc565b929093602082013567ffffffffffffffff811161013a57836106479184016105cc565b929093604082013567ffffffffffffffff811161013a5761066892016105cc565b9091565b3461013a5761022d61067f3660046105fc565b94939093929192610f3d565b3461013a5761022d61069e36600461026e565b611172565b3461013a5761022d6106b63660046102ae565b9061134c565b3461013a576106cc366004610481565b6101967f000000000000000000000000000000000000000000000000000000000000000061029d565b3461013a5761022d61070836600461026e565b6113e5565b80610728637965db0b60e01b5b916001600160e01b03191690565b14908115610734575090565b6101629150611515565b1561074557565b60405162461bcd60e51b815260206004820152601a60248201527f415030313a206f6666657220616c7265616479206578697374730000000000006044820152606490fd5b0390fd5b90600019905b9181191691161790565b906107ac6101626107b39290565b825461078e565b9055565b906001600160a01b0390610794565b610162906101ad906001600160a01b031682565b610162906107c6565b610162906107da565b906107fc6101626107b3926107e3565b82546107b7565b906107ac6101626107b3926104d8565b9060ff90610794565b9061082c6101626107b3926103e7565b8254610813565b90815260408101929161014c9160200152565b6108f5610857610162836000610303565b61087f6108666007830161032f565b61087961087360006103dd565b916103dd565b1461073e565b6108898585611582565b610893838261079e565b6108a033600183016107ec565b6108ad84600283016107ec565b6108ba8560038301610803565b6108c78660048301610803565b6108d48560058301610803565b6108ea6108e160006104d8565b60068301610803565b60076001910161081c565b3391929361092d6109276109277fd6111bcd4310914ad2151ee16ca408a5bc1ebcdec3a8b839e41fd706b70348fa9490565b946107e3565b9461094361093a60405190565b92839283610833565b0390a4565b1561094f57565b60405162461bcd60e51b815260206004820152601760248201527f415030333a206f66666572206973206e6f74206f70656e0000000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b919082018092116109b757565b610994565b610a3c6109cd610162836000610303565b6109ef6109dc6007830161032f565b6109e961087360016103dd565b14610948565b610a0d610a0660028301546001600160a01b031690565b8590611582565b610a2c60038201610a2686610a218361031a565b6109aa565b90610803565b600501610a2684610a218361031a565b610a71610a677fa9beb7e55f1bfe250de500d9d2a335083cf75a8983506f4fa6a80375e861f0739290565b926102a160405190565b0390a2565b6001610aa061016292610a87600090565b506000600080516020611b658339815191525b01610303565b0161031a565b9061014c91610abc610ab782610a76565b6115cd565b90610ac6916115e8565b50565b9061014c91610aa6565b9080610aee610ae1336101ad565b916001600160a01b031690565b03610afc57610ac69161167a565b60405163334bd91960e11b8152600490fd5b6101629060401c610329565b6101629054610b0e565b610162905b67ffffffffffffffff1690565b6101629054610b24565b610b296101626101629290565b9067ffffffffffffffff90610794565b610b296101626101629267ffffffffffffffff1690565b90610b846101626107b392610b5d565b8254610b4d565b9068ff00000000000000009060401b610794565b90610baf6101626107b392151590565b8254610b8b565b61016590610b40565b60208101929161014c9190610bb6565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610c00610bfc82610b1a565b1590565b610c0982610b36565b80610c25610c176000610b40565b9167ffffffffffffffff1690565b1480610d14575b90610c3a610c176001610b40565b1480610ced575b90155b9081610ce4575b50610cd257610c63610c5d6001610b40565b83610b74565b80610cc2575b610c71610d1b565b610c785750565b610c8490600090610b9f565b6001610cbd7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291610cb460405190565b91829182610bbf565b0390a1565b610ccd600183610b9f565b610c69565b60405163f92ee8a960e01b8152600490fd5b15905038610c4b565b50610c44610cfa306107e3565b3b610d0c610d0860006104d8565b9190565b149050610c41565b5081610c2c565b610d236116f3565b610d2b611703565b610d3d610d366104e5565b33906115e8565b50610ac6337f00000000000000000000000000000000000000000000000000000000000000006115e8565b61014c610bcf565b90610305906107e3565b610162916000610da5610dab93610d8f600090565b5082600080516020611b65833981519152610a9a565b01610d70565b61032f565b15610db757565b60405162461bcd60e51b815260206004820152601760248201527f415030373a206f66666572206973206e6f74206f70656e0000000000000000006044820152606490fd5b15610e0357565b60405162461bcd60e51b815260206004820152600f60248201526e20a818981d103737ba1037bbb732b960891b6044820152606490fd5b610e4b61016261014c926000610303565b610e6d610e5a6007830161032f565b610e6761087360016103dd565b14610db0565b610e93610e8460018301546001600160a01b031690565b610e8d33610ae1565b14610dfc565b610ebd610eaa60028301546001600160a01b031690565b33610eb76005850161031a565b91611717565b60076002910161081c565b15610ecf57565b60405162461bcd60e51b815260206004820152601160248201527020a8181b1d103737ba1036b0b730b3b2b960791b6044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b9190811015610f2e576020020190565b610f08565b356101628161019a565b9195949291610f74610f6f337f0000000000000000000000000000000000000000000000000000000000000000610d7a565b610ec8565b610f7e60006104d8565b80610f8884610d08565b1015610fd557610fd090610fca610fa8610fa3838787610f1e565b610f33565b610fb6610fa384898e610f1e565b610fc4610fa3858b8d610f1e565b91611807565b60010190565b610f7e565b5050505050509050565b15610fe657565b60405162461bcd60e51b815260206004820152601660248201527510540c0d0e88185b1c9958591e481858d8d95c1d195960521b6044820152606490fd5b818102929181159184041417156109b757565b1561103e57565b60405162461bcd60e51b815260206004820152601760248201527f415030353a2066756c6c207061727469636170616e74730000000000000000006044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176110bb57604052565b611083565b9061014c6110cd60405190565b9283611099565b61016260606110c0565b9061016590610557565b6101629051610557565b9061082c6101626107b392610561565b61014c91906111469060409060029061112c8161112687516001600160a01b031690565b906107ec565b61113e60018201610a26602088015190565b0192016110e8565b906110f2565b9061014c91611102565b60001981146109b75760010190565b919082039182116109b757565b90611181610162836000610303565b906111916109dc6007840161032f565b61119b60006104d8565b806111ae610d086101626006870161031a565b10156111f8576111f390610fca6111e360006111d56111ce896001610303565b8590610512565b01546001600160a01b031690565b6111ec33610ae1565b1415610fdf565b61119b565b50916112d460066112e4926112526112126003870161031a565b61124b610d0861016261122760048b0161031a565b611245611235898d0161031a565b61123f60016104d8565b906109aa565b90611024565b1015611037565b6112b6336112926001611289611282600061127d61126e6110d4565b6001600160a01b039097168752565b6104d8565b6020850152565b604083016110de565b6112b16112a0846001610303565b6112ab868a0161031a565b90610512565b61114c565b6112cd828601610a266112c88261031a565b611156565b930161031a565b6112de60016104d8565b90611165565b339061132061131a6113147fb33b2c1237dfb2552a9683de51dc3175f83c108596cf71b7f1d0dff9652f05959590565b926104d8565b926107e3565b9261132a60405190565b8080610943565b9061014c91611342610ab782610a76565b90610ac69161167a565b9061014c91611331565b1561135d57565b60405162461bcd60e51b815260206004820152601960248201527f415031313a206e6f7420616363657074656420737461747573000000000000006044820152606490fd5b156113a957565b60405162461bcd60e51b8152602060048201526014602482015273415031323a20726577617264206973207a65726f60601b6044820152606490fd5b6113f3610162826000610303565b6113fd60006104d8565b80611410610d086101626006860161031a565b10156115105761142e610162611427856001610303565b8390610512565b80546001600160a01b031661144233610ae1565b1461145057506001016113fd565b916114a660026114b39261148461146b83889997990161032f565b61147e6114786001610557565b91610557565b14611356565b6111d56114936001880161031a565b6114a0610d0860006104d8565b116113a2565b33610eb76001860161031a565b6114c060028084016110f2565b916114ce600133930161031a565b926109436115066109276115007fea05f852fc37f67419e151136bc6f59b47af09ce8a30091acaddc0fc864c96379490565b946104d8565b946102a160405190565b505050565b6115256301ffc9a760e01b61071a565b1490565b6101ad6101626101629290565b61016290611529565b1561154657565b60405162461bcd60e51b815260206004820152601460248201527310540c0c8e881a5b9d985b1a5908185b5bdd5b9d60621b6044820152606490fd5b9081611594610ae16101ad6000611536565b036115af5761014c91506115a9610d08349290565b1461153f565b6115bb61014c926107e3565b90336115c6306107e3565b9192611953565b61014c9033906119be565b9061082c6101626107b392151590565b600080516020611b65833981519152611604610bfc8484610d7a565b156116725761162e90611629600061162181600194018690610303565b018590610d70565b6115d8565b90339061165f61131a61131a7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b9261166960405190565b600090a4600190565b505050600090565b600080516020611b658339815191526116938383610d7a565b15611672576116af906116296000611621818094018690610303565b90339061165f61131a61131a7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b6116e86119f6565b61014c61014c611a61565b61014c6116e0565b61014c6119f6565b61014c6116fb565b6040513d6000823e3d90fd5b80611728610ae16101ad6000611536565b036117635750600080809361174561174083956107e3565b6107e3565b82821561175a575bf11561175557565b61170b565b506108fc61174d565b9161177061014c936107e3565b919091611a69565b1561177f57565b60405162461bcd60e51b815260206004820152601960248201527f415030383a206e6f7420616363657074656420737461747573000000000000006044820152606490fd5b156117cb57565b60405162461bcd60e51b815260206004820152601460248201527310540c0e4e881a5b9d985b1a59081c995dd85c9960621b6044820152606490fd5b90919061189b61181b610162836000610303565b61182a610e5a6007830161032f565b61186061184d6002611847611840876001610303565b8990610512565b0161032f565b61185a6114786001610557565b14611778565b61187d84611876610d086101626004860161031a565b11156117c4565b600561189461188d82840161031a565b8690611165565b9101610803565b6118c382610a2660016118b86118b18683610303565b8890610512565b0191610a218361031a565b9190916119046118fa6118f47f3b31812956b151411ca77ec726775dadbebe9a926a3726e440a0ace54a5996de9390565b936104d8565b936102a160405190565b0390a3565b61192261191c6101629263ffffffff1690565b60e01b90565b6001600160e01b03191690565b6001600160a01b0391821681529116602082015260608101929161014c9160400152565b61014c93600493919261199c92909161198d916119736323b872dd611909565b9361197d60405190565b978895602087019081520161192f565b60208201810382520383611099565b611a9f565b6001600160a01b03909116815260408101929161014c9160200152565b906119cc610bfc8284610d7a565b6119d4575050565b61078a6119e060405190565b63e2517d3f60e01b8152928392600484016119a1565b611a01610bfc611b3b565b611a0757565b604051631afcd79f60e31b8152600490fd5b611a216119f6565b61014c611a33565b61016260016104d8565b61014c7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006000611894611a29565b61014c611a19565b61014c9260049261199c9161198d90611a8563a9059cbb611909565b92611a8f60405190565b96879460208601908152016119a1565b906000602091611aad600090565b50828151910182855af11561170b573d60005190611ace610d0860006104d8565b03611b275750611add816107e3565b3b611aeb610d0860006104d8565b145b611af45750565b611b0061078a916107e3565b604051635274afe760e01b8152918291600483016001600160a01b03909116815260200190565b611b34610d0860016104d8565b1415611aed565b6101627ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610b1a56fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a164736f6c6343000818000a",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146101225780630ae9b5781461011d57806312c961d514610118578063248a9ca3146101135780632f2ff15d1461010e57806336568abe14610109578063474d3ff0146101045780638129fc1c146100ff57806391d14854146100fa5780639cc2f88c146100f5578063a217fddf146100f0578063a29765a1146100eb578063aabb22c1146100e6578063b596a15e146100e1578063d547741f146100dc578063ec87621c146100d75763f54140230361013a576106f5565b6106bc565b6106a3565b61068b565b61066c565b6105a1565b6104f7565b6104c0565b6104a4565b61048c565b61044a565b6102ea565b6102d1565b610282565b610255565b610211565b610169565b6001600160e01b031981165b0361013a57565b600080fd5b9050359061014c82610127565b565b9060208282031261013a576101629161013f565b90565b9052565b3461013a5761019661018461017f36600461014e565b61070d565b60405191829182901515815260200190565b0390f35b80610133565b9050359061014c8261019a565b6001600160a01b031690565b6001600160a01b038116610133565b9050359061014c826101b9565b60808183031261013a576101e982826101a0565b926101626101fa84602085016101c8565b9361020881604086016101a0565b936060016101a0565b3461013a5761022d6102243660046101d5565b92919091610846565b604051005b919060408382031261013a576101629061024c81856101a0565b936020016101a0565b3461013a5761022d610268366004610232565b906109bc565b9060208282031261013a57610162916101a0565b3461013a5761019661029d61029836600461026e565b610a76565b6040515b9182918290815260200190565b919060408382031261013a57610162906102c881856101a0565b936020016101c8565b3461013a5761022d6102e43660046102ae565b90610ac9565b3461013a5761022d6102fd3660046102ae565b90610ad3565b905b600052602052604060002090565b6101629081565b6101629054610313565b610162905b60ff1690565b6101629054610324565b610344906000610303565b9061034e8261031a565b9161036360018201546001600160a01b031690565b9161037860028301546001600160a01b031690565b916103856003820161031a565b916103926004830161031a565b9161039f6005820161031a565b9161016260076103b16006850161031a565b930161032f565b634e487b7160e01b600052602160045260246000fd5b600311156103d857565b6103b8565b9061014c826103ce565b610162906103dd565b610165906103e7565b9081526001600160a01b039091166020820152610100810197969590949093909290916001600160a01b031660408601526060850152608084015260a083015260c082015260e00161014c916103f0565b3461013a5761019661046561046036600461026e565b610339565b9461047898969894919493929360405190565b988998896103f9565b600091031261013a57565b3461013a5761049c366004610481565b61022d610d68565b3461013a576101966101846104ba3660046102ae565b90610d7a565b3461013a5761022d6104d336600461026e565b610e3a565b6101626101626101629290565b61016260006104d8565b6101626104e5565b3461013a57610507366004610481565b61019661029d6104ef565b90610305906104d8565b9061052b610530926001610303565b610512565b80546001600160a01b03169161016260026103b16001850161031a565b600411156103d857565b9061014c8261054d565b61016290610557565b61016590610561565b6001600160a01b03909116815260608101939261014c92909160409161059a906020830152565b019061056a565b3461013a576101966105bd6105b7366004610232565b9061051c565b60405191939193849384610573565b909182601f8301121561013a5781359167ffffffffffffffff831161013a57602001926020830284011161013a57565b9060608282031261013a57813567ffffffffffffffff811161013a57816106249184016105cc565b929093602082013567ffffffffffffffff811161013a57836106479184016105cc565b929093604082013567ffffffffffffffff811161013a5761066892016105cc565b9091565b3461013a5761022d61067f3660046105fc565b94939093929192610f3d565b3461013a5761022d61069e36600461026e565b611172565b3461013a5761022d6106b63660046102ae565b9061134c565b3461013a576106cc366004610481565b6101967f000000000000000000000000000000000000000000000000000000000000000061029d565b3461013a5761022d61070836600461026e565b6113e5565b80610728637965db0b60e01b5b916001600160e01b03191690565b14908115610734575090565b6101629150611515565b1561074557565b60405162461bcd60e51b815260206004820152601a60248201527f415030313a206f6666657220616c7265616479206578697374730000000000006044820152606490fd5b0390fd5b90600019905b9181191691161790565b906107ac6101626107b39290565b825461078e565b9055565b906001600160a01b0390610794565b610162906101ad906001600160a01b031682565b610162906107c6565b610162906107da565b906107fc6101626107b3926107e3565b82546107b7565b906107ac6101626107b3926104d8565b9060ff90610794565b9061082c6101626107b3926103e7565b8254610813565b90815260408101929161014c9160200152565b6108f5610857610162836000610303565b61087f6108666007830161032f565b61087961087360006103dd565b916103dd565b1461073e565b6108898585611582565b610893838261079e565b6108a033600183016107ec565b6108ad84600283016107ec565b6108ba8560038301610803565b6108c78660048301610803565b6108d48560058301610803565b6108ea6108e160006104d8565b60068301610803565b60076001910161081c565b3391929361092d6109276109277fd6111bcd4310914ad2151ee16ca408a5bc1ebcdec3a8b839e41fd706b70348fa9490565b946107e3565b9461094361093a60405190565b92839283610833565b0390a4565b1561094f57565b60405162461bcd60e51b815260206004820152601760248201527f415030333a206f66666572206973206e6f74206f70656e0000000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b919082018092116109b757565b610994565b610a3c6109cd610162836000610303565b6109ef6109dc6007830161032f565b6109e961087360016103dd565b14610948565b610a0d610a0660028301546001600160a01b031690565b8590611582565b610a2c60038201610a2686610a218361031a565b6109aa565b90610803565b600501610a2684610a218361031a565b610a71610a677fa9beb7e55f1bfe250de500d9d2a335083cf75a8983506f4fa6a80375e861f0739290565b926102a160405190565b0390a2565b6001610aa061016292610a87600090565b506000600080516020611b658339815191525b01610303565b0161031a565b9061014c91610abc610ab782610a76565b6115cd565b90610ac6916115e8565b50565b9061014c91610aa6565b9080610aee610ae1336101ad565b916001600160a01b031690565b03610afc57610ac69161167a565b60405163334bd91960e11b8152600490fd5b6101629060401c610329565b6101629054610b0e565b610162905b67ffffffffffffffff1690565b6101629054610b24565b610b296101626101629290565b9067ffffffffffffffff90610794565b610b296101626101629267ffffffffffffffff1690565b90610b846101626107b392610b5d565b8254610b4d565b9068ff00000000000000009060401b610794565b90610baf6101626107b392151590565b8254610b8b565b61016590610b40565b60208101929161014c9190610bb6565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610c00610bfc82610b1a565b1590565b610c0982610b36565b80610c25610c176000610b40565b9167ffffffffffffffff1690565b1480610d14575b90610c3a610c176001610b40565b1480610ced575b90155b9081610ce4575b50610cd257610c63610c5d6001610b40565b83610b74565b80610cc2575b610c71610d1b565b610c785750565b610c8490600090610b9f565b6001610cbd7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291610cb460405190565b91829182610bbf565b0390a1565b610ccd600183610b9f565b610c69565b60405163f92ee8a960e01b8152600490fd5b15905038610c4b565b50610c44610cfa306107e3565b3b610d0c610d0860006104d8565b9190565b149050610c41565b5081610c2c565b610d236116f3565b610d2b611703565b610d3d610d366104e5565b33906115e8565b50610ac6337f00000000000000000000000000000000000000000000000000000000000000006115e8565b61014c610bcf565b90610305906107e3565b610162916000610da5610dab93610d8f600090565b5082600080516020611b65833981519152610a9a565b01610d70565b61032f565b15610db757565b60405162461bcd60e51b815260206004820152601760248201527f415030373a206f66666572206973206e6f74206f70656e0000000000000000006044820152606490fd5b15610e0357565b60405162461bcd60e51b815260206004820152600f60248201526e20a818981d103737ba1037bbb732b960891b6044820152606490fd5b610e4b61016261014c926000610303565b610e6d610e5a6007830161032f565b610e6761087360016103dd565b14610db0565b610e93610e8460018301546001600160a01b031690565b610e8d33610ae1565b14610dfc565b610ebd610eaa60028301546001600160a01b031690565b33610eb76005850161031a565b91611717565b60076002910161081c565b15610ecf57565b60405162461bcd60e51b815260206004820152601160248201527020a8181b1d103737ba1036b0b730b3b2b960791b6044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b9190811015610f2e576020020190565b610f08565b356101628161019a565b9195949291610f74610f6f337f0000000000000000000000000000000000000000000000000000000000000000610d7a565b610ec8565b610f7e60006104d8565b80610f8884610d08565b1015610fd557610fd090610fca610fa8610fa3838787610f1e565b610f33565b610fb6610fa384898e610f1e565b610fc4610fa3858b8d610f1e565b91611807565b60010190565b610f7e565b5050505050509050565b15610fe657565b60405162461bcd60e51b815260206004820152601660248201527510540c0d0e88185b1c9958591e481858d8d95c1d195960521b6044820152606490fd5b818102929181159184041417156109b757565b1561103e57565b60405162461bcd60e51b815260206004820152601760248201527f415030353a2066756c6c207061727469636170616e74730000000000000000006044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176110bb57604052565b611083565b9061014c6110cd60405190565b9283611099565b61016260606110c0565b9061016590610557565b6101629051610557565b9061082c6101626107b392610561565b61014c91906111469060409060029061112c8161112687516001600160a01b031690565b906107ec565b61113e60018201610a26602088015190565b0192016110e8565b906110f2565b9061014c91611102565b60001981146109b75760010190565b919082039182116109b757565b90611181610162836000610303565b906111916109dc6007840161032f565b61119b60006104d8565b806111ae610d086101626006870161031a565b10156111f8576111f390610fca6111e360006111d56111ce896001610303565b8590610512565b01546001600160a01b031690565b6111ec33610ae1565b1415610fdf565b61119b565b50916112d460066112e4926112526112126003870161031a565b61124b610d0861016261122760048b0161031a565b611245611235898d0161031a565b61123f60016104d8565b906109aa565b90611024565b1015611037565b6112b6336112926001611289611282600061127d61126e6110d4565b6001600160a01b039097168752565b6104d8565b6020850152565b604083016110de565b6112b16112a0846001610303565b6112ab868a0161031a565b90610512565b61114c565b6112cd828601610a266112c88261031a565b611156565b930161031a565b6112de60016104d8565b90611165565b339061132061131a6113147fb33b2c1237dfb2552a9683de51dc3175f83c108596cf71b7f1d0dff9652f05959590565b926104d8565b926107e3565b9261132a60405190565b8080610943565b9061014c91611342610ab782610a76565b90610ac69161167a565b9061014c91611331565b1561135d57565b60405162461bcd60e51b815260206004820152601960248201527f415031313a206e6f7420616363657074656420737461747573000000000000006044820152606490fd5b156113a957565b60405162461bcd60e51b8152602060048201526014602482015273415031323a20726577617264206973207a65726f60601b6044820152606490fd5b6113f3610162826000610303565b6113fd60006104d8565b80611410610d086101626006860161031a565b10156115105761142e610162611427856001610303565b8390610512565b80546001600160a01b031661144233610ae1565b1461145057506001016113fd565b916114a660026114b39261148461146b83889997990161032f565b61147e6114786001610557565b91610557565b14611356565b6111d56114936001880161031a565b6114a0610d0860006104d8565b116113a2565b33610eb76001860161031a565b6114c060028084016110f2565b916114ce600133930161031a565b926109436115066109276115007fea05f852fc37f67419e151136bc6f59b47af09ce8a30091acaddc0fc864c96379490565b946104d8565b946102a160405190565b505050565b6115256301ffc9a760e01b61071a565b1490565b6101ad6101626101629290565b61016290611529565b1561154657565b60405162461bcd60e51b815260206004820152601460248201527310540c0c8e881a5b9d985b1a5908185b5bdd5b9d60621b6044820152606490fd5b9081611594610ae16101ad6000611536565b036115af5761014c91506115a9610d08349290565b1461153f565b6115bb61014c926107e3565b90336115c6306107e3565b9192611953565b61014c9033906119be565b9061082c6101626107b392151590565b600080516020611b65833981519152611604610bfc8484610d7a565b156116725761162e90611629600061162181600194018690610303565b018590610d70565b6115d8565b90339061165f61131a61131a7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b9261166960405190565b600090a4600190565b505050600090565b600080516020611b658339815191526116938383610d7a565b15611672576116af906116296000611621818094018690610303565b90339061165f61131a61131a7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b6116e86119f6565b61014c61014c611a61565b61014c6116e0565b61014c6119f6565b61014c6116fb565b6040513d6000823e3d90fd5b80611728610ae16101ad6000611536565b036117635750600080809361174561174083956107e3565b6107e3565b82821561175a575bf11561175557565b61170b565b506108fc61174d565b9161177061014c936107e3565b919091611a69565b1561177f57565b60405162461bcd60e51b815260206004820152601960248201527f415030383a206e6f7420616363657074656420737461747573000000000000006044820152606490fd5b156117cb57565b60405162461bcd60e51b815260206004820152601460248201527310540c0e4e881a5b9d985b1a59081c995dd85c9960621b6044820152606490fd5b90919061189b61181b610162836000610303565b61182a610e5a6007830161032f565b61186061184d6002611847611840876001610303565b8990610512565b0161032f565b61185a6114786001610557565b14611778565b61187d84611876610d086101626004860161031a565b11156117c4565b600561189461188d82840161031a565b8690611165565b9101610803565b6118c382610a2660016118b86118b18683610303565b8890610512565b0191610a218361031a565b9190916119046118fa6118f47f3b31812956b151411ca77ec726775dadbebe9a926a3726e440a0ace54a5996de9390565b936104d8565b936102a160405190565b0390a3565b61192261191c6101629263ffffffff1690565b60e01b90565b6001600160e01b03191690565b6001600160a01b0391821681529116602082015260608101929161014c9160400152565b61014c93600493919261199c92909161198d916119736323b872dd611909565b9361197d60405190565b978895602087019081520161192f565b60208201810382520383611099565b611a9f565b6001600160a01b03909116815260408101929161014c9160200152565b906119cc610bfc8284610d7a565b6119d4575050565b61078a6119e060405190565b63e2517d3f60e01b8152928392600484016119a1565b611a01610bfc611b3b565b611a0757565b604051631afcd79f60e31b8152600490fd5b611a216119f6565b61014c611a33565b61016260016104d8565b61014c7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006000611894611a29565b61014c611a19565b61014c9260049261199c9161198d90611a8563a9059cbb611909565b92611a8f60405190565b96879460208601908152016119a1565b906000602091611aad600090565b50828151910182855af11561170b573d60005190611ace610d0860006104d8565b03611b275750611add816107e3565b3b611aeb610d0860006104d8565b145b611af45750565b611b0061078a916107e3565b604051635274afe760e01b8152918291600483016001600160a01b03909116815260200190565b611b34610d0860016104d8565b1415611aed565b6101627ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610b1a56fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a164736f6c6343000818000a",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1813,
        "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
        "label": "offers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Offer)2437_storage)"
      },
      {
        "astId": 1820,
        "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
        "label": "particapants",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_struct(Particapant)2419_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(OfferStatus)2406": {
        "encoding": "inplace",
        "label": "enum IAutoPayoutVault.OfferStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ParticapantStatus)2411": {
        "encoding": "inplace",
        "label": "enum IAutoPayoutVault.ParticapantStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_struct(Particapant)2419_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => struct IAutoPayoutVault.Particapant))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Particapant)2419_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Offer)2437_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IAutoPayoutVault.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)2437_storage"
      },
      "t_mapping(t_uint256,t_struct(Particapant)2419_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IAutoPayoutVault.Particapant)",
        "numberOfBytes": "32",
        "value": "t_struct(Particapant)2419_storage"
      },
      "t_struct(Offer)2437_storage": {
        "encoding": "inplace",
        "label": "struct IAutoPayoutVault.Offer",
        "members": [
          {
            "astId": 2421,
            "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2423,
            "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
            "label": "addr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2425,
            "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
            "label": "tokenPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2427,
            "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
            "label": "totalPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2429,
            "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
            "label": "minPayout",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2431,
            "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
            "label": "balance",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2433,
            "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
            "label": "particapantCounter",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2436,
            "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
            "label": "status",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(OfferStatus)2406"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Particapant)2419_storage": {
        "encoding": "inplace",
        "label": "struct IAutoPayoutVault.Particapant",
        "members": [
          {
            "astId": 2413,
            "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2415,
            "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
            "label": "reward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2418,
            "contract": "contracts/AutoPayoutVault.sol:AutoPayoutVault",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(ParticapantStatus)2411"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
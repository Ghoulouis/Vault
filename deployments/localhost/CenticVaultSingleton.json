{
  "address": "0xe44A3cfaFbEEfa780674CE4D152Ad2e3ca3d0Ee2",
  "abi": [
    {
      "inputs": [],
      "name": "DuplicatedOffer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySponsor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "AddMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "member",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenPayout",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "enum ICenticVault.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": true,
          "internalType": "struct ICenticVault.Offer",
          "name": "offer",
          "type": "tuple"
        }
      ],
      "name": "UpdateOffer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "member",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenPayout",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "enum ICenticVault.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct ICenticVault.Offer",
          "name": "_offer",
          "type": "tuple"
        }
      ],
      "name": "addOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadlineClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenPayout",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalPayout",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "offers",
      "outputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenPayout",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "enum ICenticVault.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sponsor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPayout",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenPayout",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalPayout",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "updateOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "enum ICenticVault.Status",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "updateStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb24ea8f801cae20fd417f46ff752a6409e314f309b39462530901c4591c6e154",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1447060",
    "logsBloom": "0x
    "blockHash": "0x2fef26148027c7e5da4fff0252006f543c75d8a076b48a4569d67a07a26d4c8c",
    "transactionHash": "0xb24ea8f801cae20fd417f46ff752a6409e314f309b39462530901c4591c6e154",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "1447060",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1b319f5f145f48fd71799023e0d427a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DuplicatedOffer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySponsor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"AddMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPayout\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"enum ICenticVault.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":true,\"internalType\":\"struct ICenticVault.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"UpdateOffer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPayout\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"enum ICenticVault.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ICenticVault.Offer\",\"name\":\"_offer\",\"type\":\"tuple\"}],\"name\":\"addOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlineClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenPayout\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalPayout\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPayout\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"enum ICenticVault.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sponsor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPayout\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenPayout\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalPayout\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"updateOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"enum ICenticVault.Status\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CenticVault.sol\":\"CenticVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/CenticVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/ICenticVault.sol\\\";\\n\\ncontract CenticVault is ICenticVault, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant VERSION = \\\"1.0\\\";\\n    address public sponsor;\\n    address public tokenPayout;\\n    uint256 public totalPayout;\\n    address public manager;\\n    uint256 public deadline;\\n    uint256 public deadlineClaim;\\n\\n    bool fauceted = false;\\n    bool vaultClosed = false;\\n    uint256 balance;\\n    address[] public members;\\n\\n    mapping(address => Offer) public offers;\\n\\n    modifier onlyManager() {\\n        if (manager != msg.sender) revert OnlyManager();\\n        _;\\n    }\\n\\n    modifier onlySponsor() {\\n        if (sponsor != msg.sender) revert OnlySponsor();\\n        _;\\n    }\\n\\n    function initialize(\\n        address _sponsor,\\n        address _tokenPayout,\\n        uint256 _totalPayout,\\n        address _manager\\n    ) public initializer {\\n        __ReentrancyGuard_init();\\n        sponsor = _sponsor;\\n        tokenPayout = _tokenPayout;\\n        totalPayout = _totalPayout;\\n        manager = _manager;\\n    }\\n\\n    function deposit() public payable {\\n        require(fauceted == false, \\\"Vault already fauceted\\\");\\n        if (tokenPayout != address(0)) {\\n            IERC20(tokenPayout).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                totalPayout\\n            );\\n        } else {\\n            require(msg.value == totalPayout, \\\"Invalid amount\\\");\\n        }\\n        fauceted = true;\\n        balance = totalPayout;\\n    }\\n\\n    function updateOffer(\\n        address _sponsor,\\n        address _tokenPayout,\\n        uint256 _totalPayout,\\n        address _manager,\\n        uint256 _deadline\\n    ) public onlyManager {\\n        sponsor = _sponsor;\\n        tokenPayout = _tokenPayout;\\n        totalPayout = _totalPayout;\\n        manager = _manager;\\n        deadline = _deadline;\\n    }\\n\\n    function addOffer(Offer calldata _offer) public onlyManager {\\n        require(\\n            offers[_offer.member].status == Status.Deactivate,\\n            \\\"Duplicated offer\\\"\\n        );\\n\\n        _addMember(_offer.member);\\n        _updateOffer(_offer);\\n    }\\n\\n    function updateStatus(address _member, Status _status) public onlyManager {\\n        Offer storage offer = offers[_member];\\n        offer.status = _status;\\n        emit UpdateOffer(offer);\\n    }\\n\\n    function claim() public nonReentrant {\\n        require(\\n            offers[msg.sender].status == Status.Claimable,\\n            \\\"Invalid status\\\"\\n        );\\n        offers[msg.sender].status = Status.Claimed;\\n        if (tokenPayout != address(0)) {\\n            IERC20(tokenPayout).safeTransfer(msg.sender, totalPayout);\\n        } else {\\n            payable(msg.sender).transfer(totalPayout);\\n        }\\n    }\\n\\n    function closeVault() public onlyManager nonReentrant {\\n        require(block.timestamp > deadline, \\\"Invalid deadline\\\");\\n        require(vaultClosed == false, \\\"Vault already closed\\\");\\n        uint256 amountClaimNeed = 0;\\n        for (uint256 i = 0; i < members.length; i++) {\\n            if (offers[members[i]].status == Status.Claimable) {\\n                amountClaimNeed += offers[members[i]].amountPayout;\\n            }\\n        }\\n\\n        if (tokenPayout != address(0)) {\\n            IERC20(tokenPayout).safeTransfer(\\n                sponsor,\\n                balance - amountClaimNeed\\n            );\\n        } else {\\n            payable(manager).transfer(amountClaimNeed);\\n        }\\n\\n        vaultClosed = true;\\n    }\\n\\n    //region Internal functions\\n\\n    function _updateOffer(Offer calldata _offer) internal {\\n        Offer storage offer = offers[_offer.member];\\n        offer.description = _offer.description;\\n        offer.tokenPayout = _offer.tokenPayout;\\n        offer.amountPayout = _offer.amountPayout;\\n        offer.deadline = _offer.deadline;\\n        offer.status = _offer.status;\\n        emit UpdateOffer(offer);\\n    }\\n\\n    function _addMember(address _member) internal {\\n        members.push(_member);\\n        emit AddMember(_member);\\n    }\\n}\\n\",\"keccak256\":\"0x5bd78a22206695ffb0061f194c7473c55023a4a7af26954e0c4a975cbe6bf796\",\"license\":\"MIT\"},\"contracts/interfaces/ICenticVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICenticVault {\\n    enum Status {\\n        Deactivate,\\n        Active,\\n        Claimable,\\n        Claimed,\\n        Cancelled,\\n        Expired\\n    }\\n\\n    struct Offer {\\n        string description;\\n        address member;\\n        address tokenPayout;\\n        uint256 amountPayout;\\n        uint256 deadline;\\n        Status status;\\n    }\\n\\n    // Only manager can make this call\\n    error OnlyManager();\\n    // Only sponsor can make this call\\n    error OnlySponsor();\\n\\n    error DuplicatedOffer();\\n\\n    event AddMember(address indexed member);\\n\\n    event UpdateOffer(Offer indexed offer);\\n}\\n\",\"keccak256\":\"0x922911d4dad67e1388cd534215a1cbe9396f22911f6b5ff6e2da6d4c557aa326\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523462000026576200001462000085565b604051611911620000a4823961191190f35b600080fd5b9060ff905b9181191691161790565b90565b90620000506200003a6200005892151590565b82546200002b565b9055565b9061ff009060081b62000030565b906200007d6200003a6200005892151590565b82546200005c565b62000093600060066200003d565b620000a1600060066200006a565b56fe6080604052600436101561001257600080fd5b60003560e01c80630f28ce961461011257806318976fa21461010d57806329dcb0cf14610108578063413bf38f1461010357806344c5bbf8146100fe578063454f7b8f146100f9578063481c6a75146100f45780634e71d92d146100ef578063536d7942146100ea5780635daf08ca146100e557806374a9254d146100e057806377c93662146100db57806387b551b5146100d6578063be203094146100d1578063d0e30db0146100cc5763ffa1ad7403610138576108b0565b610813565b6107f7565b6107a0565b610779565b610753565b61072c565b6106a4565b610658565b610623565b6105e4565b6105bf565b610551565b610219565b6101db565b6101ab565b6001600160a01b031690565b90565b6001600160a01b0381165b0361013857565b600080fd5b9050359061014a82610126565b565b80610131565b9050359061014a8261014c565b919060a08382031261013857610175818461013d565b92610183826020830161013d565b926101236101948460408501610152565b936101a2816060860161013d565b93608001610152565b34610138576101c76101be36600461015f565b939290926109b0565b604051005b0390f35b600091031261013857565b34610138576101eb3660046101d0565b6101c7610c81565b610123916008021c81565b9061012391546101f3565b610123600060046101fe565b9052565b34610138576102293660046101d0565b6101cc610234610209565b6040519182918290815260200190565b90602082820312610138576101239161013d565b61012390610117906001600160a01b031682565b61012390610258565b6101239061026c565b9061028890610275565b600052602052604060002090565b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156102cc575b60208310146102c757565b610296565b91607f16916102bc565b805460009392916102f36102e9836102ac565b8085529360200190565b9160018116908115610345575060011461030c57505050565b61031f9192939450600052602060002090565b916000925b8184106103315750500190565b805484840152602090930192600101610324565b92949550505060ff1916825215156020020190565b90610123916102d6565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761039c57604052565b610364565b9061014a6103bb926103b260405190565b9384809261035a565b038361037a565b61012390610117565b61012390546103c2565b6101239081565b61012390546103d5565b610123905b60ff1690565b61012390546103e6565b61040690600961027e565b90610410826103a1565b9161041d600182016103cb565b9161042a600283016103cb565b91610437600382016103dc565b916101236005610449600485016103dc565b93016103f1565b60005b8381106104635750506000910152565b8181015183820152602001610453565b61049461049d6020936104a793610488815190565b80835293849260200190565b95869101610450565b601f01601f191690565b0190565b634e487b7160e01b600052602160045260246000fd5b600611156104cb57565b6104ab565b9061014a826104c1565b610123906104d0565b610215906104da565b919695939461054361014a9661053c60a09661052c61051a61054a9760c08a01908a820360008c0152610473565b6001600160a01b03909d166020890152565b6001600160a01b03166040870152565b6060850152565b6080830152565b01906104e3565b34610138576101cc61056c610567366004610244565b6103fb565b9261057c96949692919260405190565b968796876104ec565b6006111561013857565b9050359061014a82610585565b919060408382031261013857610123906105b6818561013d565b9360200161058f565b34610138576101c76105d236600461059c565b90610e40565b610123600060026101fe565b34610138576105f43660046101d0565b6101cc6102346105d8565b610123916008021c610117565b9061012391546105ff565b6101236000600361060c565b34610138576106333660046101d0565b6101cc61063e610617565b604051918291826001600160a01b03909116815260200190565b34610138576106683660046101d0565b6101c7610f44565b908160c09103126101385790565b9060208282031261013857813567ffffffffffffffff8111610138576101239201610670565b34610138576101c76106b736600461067e565b610fff565b906020828203126101385761012391610152565b634e487b7160e01b600052603260045260246000fd5b805482101561070957610700600191600052602060002090565b91020190600090565b6106d0565b600880548210156101385761012391610726916106e6565b9061060c565b34610138576101cc61063e6107423660046106bc565b61070e565b610123600060056101fe565b34610138576107633660046101d0565b6101cc610234610747565b61012360008061060c565b34610138576107893660046101d0565b6101cc61063e61076e565b6101236000600161060c565b34610138576107b03660046101d0565b6101cc61063e610794565b608081830312610138576107cf828261013d565b926101236107e0846020850161013d565b936107ee8160408601610152565b9360600161013d565b34610138576101c761080a3660046107bb565b9291909161123b565b61081e3660046101d0565b6101c76112d9565b9061014a61083360405190565b928361037a565b67ffffffffffffffff811161039c57602090601f01601f19160190565b906108696108648361083a565b610826565b918252565b6108786003610857565b620312e360ec1b602082015290565b61012361086e565b610123610887565b61012361088f565b602080825261012392910190610473565b34610138576108c03660046101d0565b6101cc6108cb610897565b6040519182918261089f565b939291906108e560036103cb565b6108f7335b916001600160a01b031690565b036109055761014a94610979565b60405163605919ad60e11b8152600490fd5b0390fd5b906001600160a01b03905b9181191691161790565b9061094061012361094792610275565b825461091b565b9055565b9060001990610926565b6101236101236101239290565b9061097261012361094792610955565b825461094b565b6109a99261099b61014a9695936109946109a2946000610930565b6001610930565b6002610962565b6003610930565b6004610962565b9061014a949392916108d7565b6109c760036103cb565b6109d0336108ea565b036109055761014a6109e0611389565b6109e8610b03565b61014a6113f7565b156109f757565b60405162461bcd60e51b815260206004820152601060248201526f496e76616c696420646561646c696e6560801b6044820152606490fd5b6101239060081c6103eb565b6101239054610a2f565b15610a4c57565b60405162461bcd60e51b815260206004820152601460248201527315985d5b1d08185b1c9958591e4818db1bdcd95960621b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b91908201809211610aab57565b610a88565b6101176101236101239290565b61012390610ab0565b6040513d6000823e3d90fd5b91908203918211610aab57565b9061ff009060081b610926565b90610afc61012361094792151590565b8254610adf565b610b2142610b1b610b1761012360046103dc565b9190565b116109f0565b610b40610b2e6006610a3b565b610b3a60005b91151590565b14610a45565b610b4a6000610955565b610b546000610955565b80610b64610b1761012360085490565b1015610be957610b8e6005610b886009610b826107268660086106e6565b9061027e565b016103f1565b610ba1610b9b60026104d0565b916104d0565b14610bb4575b600101610b54565b610b54565b90610be1610baf91610bdb6003610bd56009610b8261072660088a906106e6565b016103dc565b90610a9e565b919050610ba7565b50610bf460016103cb565b610c046108ea6101176000610abd565b14610c4f57610c4390610c1f610c1a60016103cb565b610275565b90610c3d610c2d60006103cb565b91610c3860076103dc565b610ad2565b91611468565b61014a60016006610aec565b600080808093610c65610c1a610c1a60036103cb565b828215610c78575bf1610c43575b610ac6565b506108fc610c6d565b61014a6109bd565b90610c9460036103cb565b610c9d336108ea565b036109055761014a91610deb565b9060ff90610926565b90610cc4610123610947926104da565b8254610cab565b80546000939291610ce2610cde836102ac565b9390565b91600181169081156103455750600114610cfb57505050565b610d0e9192939450600052602060002090565b916000925b818410610d205750500190565b805484840152602090930192600101610d13565b9061012391610ccb565b906104a7816020936104e3565b610dc16005610db9610dac610d97610d8a610d6c6101239860008901610d34565b610d7960018901546103c2565b6001600160a01b0316815260200190565b610d7960028801546103c2565b610da460038701546103d5565b815260200190565b610da460048601546103d5565b9201546103e6565b610d3e565b61012391610d4b565b610de590610ddc60405190565b91829182610dc6565b03902090565b610dfc610123610e0692600961027e565b9160058301610cb4565b610e307fdc5800cd986f90adb1f25f5b90f0db543989af9feb77521cc40809e0e7f3cc9f91610dcf565b90610e3a60405190565b600090a2565b9061014a91610c89565b610e52611389565b6109e8610e97565b15610e6157565b60405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642073746174757360901b6044820152606490fd5b610ebd610eaa6005610b8833600961027e565b610eb7610b9b60026104d0565b14610e5a565b610ed560036005610ecf33600961027e565b01610cb4565b610edf60016103cb565b610eef6108ea6101176000610abd565b14610f0f5761014a610f04610c1a60016103cb565b33610c3d60026103dc565b6000808080610f20610c1a33610275565b610f2a60026103dc565b90828215610f3b575bf115610c7357565b506108fc610f33565b61014a610e4a565b610f5660036103cb565b610f5f336108ea565b036109055761014a90610fb6565b3561012381610126565b15610f7e57565b60405162461bcd60e51b815260206004820152601060248201526f223ab83634b1b0ba32b21037b33332b960811b6044820152606490fd5b61014a90610fe6610fd36005610b886009610b8260208701610f6d565b610fe0610b9b60006104d0565b14610f77565b610ffa610ff560208301610f6d565b611512565b61170b565b61014a90610f4c565b6101239060401c6103eb565b6101239054611008565b610123905b67ffffffffffffffff1690565b610123905461101e565b6110236101236101239290565b9067ffffffffffffffff90610926565b6110236101236101239267ffffffffffffffff1690565b9061107e61012361094792611057565b8254611047565b9068ff00000000000000009060401b610926565b906110a961012361094792151590565b8254611085565b6102159061103a565b60208101929161014a91906110b0565b9091926110f37ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b9361110461110086611014565b1590565b9361110e86611030565b8061112a61111c600061103a565b9167ffffffffffffffff1690565b1480611215575b9061113f61111c600161103a565b14806111f2575b90155b90816111e9575b506111d7576111769361116c611166600161103a565b8861106e565b856111c75761121c565b61117d5750565b61118990600090611099565b60016111c27fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916111b960405190565b918291826110b9565b0390a1565b6111d2600188611099565b61121c565b60405163f92ee8a960e01b8152600490fd5b15905038611150565b506111496111ff30610275565b3b61120d610b176000610955565b149050611146565b5085611131565b9161099b6109a29261099461014a96956112346117a6565b6000610930565b9061014a9392916110c9565b1561124e57565b60405162461bcd60e51b815260206004820152601660248201527515985d5b1d08185b1c9958591e4819985d58d95d195960521b6044820152606490fd5b1561129357565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606490fd5b90610cc461012361094792151590565b6112f66112e660066103f1565b6112f06000610b34565b14611247565b61130060016103cb565b6113106108ea6101176000610abd565b1461136057611340611325610c1a60016103cb565b3361132f30610275565b9061133a60026103dc565b926117d2565b61134c600160066112c9565b61014a61135960026103dc565b6007610962565b61137a34611374610b1761012360026103dc565b1461128c565b611340565b6101236002610955565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006113b3816103dc565b6113c1610b1761012361137f565b146113db5761014a9060006113d461137f565b9101610962565b604051633ee5aeb560e01b8152600490fd5b6101236001610955565b61014a7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0060006113d46113ed565b61143e6114386101239263ffffffff1690565b60e01b90565b6001600160e01b03191690565b6001600160a01b03909116815260408101929161014a9160200152565b61014a926004926114ad9161149e9061148463a9059cbb611425565b9261148e60405190565b968794602086019081520161144b565b6020820181038252038361037a565b61180c565b916001600160a01b0360089290920291821b911b610926565b91906114dc61012361094793610275565b9083546114b2565b908154916801000000000000000083101561039c578261150c91600161014a950181556106e6565b906114cb565b61151d8160086114e4565b610e307f1a2323d99020f3db8e6ea85b1eea81e5bf422695877228e3d8a0241d7e957a6c91610275565b903590601e193682900301821215610138570180359067ffffffffffffffff8211610138576020019136829003831361013857565b9160001960089290920291821b911b610926565b91906115a161012361094793610955565b90835461157c565b61014a91600091611590565b8181106115c0575050565b806115ce60006001936115a9565b016115b5565b9190601f81116115e357505050565b6115f561014a93600052602060002090565b906020601f840181900483019310611617575b6020601f9091010401906115b5565b9091508190611608565b919067ffffffffffffffff821161039c576116468261164085546102ac565b856115d4565b600090601f831160011461168157610947929160009183611676575b5050600019600883021c1916906002021790565b013590503880611662565b601f1983169161169685600052602060002090565b9260005b8181106116d4575091600293918560019694106116bb575b50505002019055565b0135600019601f84166008021c191690553880806116b2565b9193602060018192878701358155019501920161169a565b9061014a9291611621565b356101238161014c565b3561012381610585565b610e0661178a60a06117276101236009610b8260208801610f6d565b9361173c6117358280611547565b90876116ec565b61175461174b60408301610f6d565b60028701610930565b61176c611763606083016116f7565b60038701610962565b61178461177b608083016116f7565b60048701610962565b01611701565b60058301610cb4565b61179b6118a8565b61014a61014a6118d3565b61014a611793565b6001600160a01b0391821681529116602082015260608101929161014a9160400152565b61014a9360049391926114ad92909161149e916117f26323b872dd611425565b936117fc60405190565b97889560208701908152016117ae565b90600060209161181a600090565b50828151910182855af115610ac6573d6000519061183b610b176000610955565b03611894575061184a81610275565b3b611858610b176000610955565b145b6118615750565b61186d61091791610275565b604051635274afe760e01b8152918291600483016001600160a01b03909116815260200190565b6118a1610b176001610955565b141561185a565b6118b36111006118db565b6118b957565b604051631afcd79f60e31b8152600490fd5b6109e86118a8565b61014a6118cb565b6101237ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061101456fea164736f6c6343000818000a",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80630f28ce961461011257806318976fa21461010d57806329dcb0cf14610108578063413bf38f1461010357806344c5bbf8146100fe578063454f7b8f146100f9578063481c6a75146100f45780634e71d92d146100ef578063536d7942146100ea5780635daf08ca146100e557806374a9254d146100e057806377c93662146100db57806387b551b5146100d6578063be203094146100d1578063d0e30db0146100cc5763ffa1ad7403610138576108b0565b610813565b6107f7565b6107a0565b610779565b610753565b61072c565b6106a4565b610658565b610623565b6105e4565b6105bf565b610551565b610219565b6101db565b6101ab565b6001600160a01b031690565b90565b6001600160a01b0381165b0361013857565b600080fd5b9050359061014a82610126565b565b80610131565b9050359061014a8261014c565b919060a08382031261013857610175818461013d565b92610183826020830161013d565b926101236101948460408501610152565b936101a2816060860161013d565b93608001610152565b34610138576101c76101be36600461015f565b939290926109b0565b604051005b0390f35b600091031261013857565b34610138576101eb3660046101d0565b6101c7610c81565b610123916008021c81565b9061012391546101f3565b610123600060046101fe565b9052565b34610138576102293660046101d0565b6101cc610234610209565b6040519182918290815260200190565b90602082820312610138576101239161013d565b61012390610117906001600160a01b031682565b61012390610258565b6101239061026c565b9061028890610275565b600052602052604060002090565b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156102cc575b60208310146102c757565b610296565b91607f16916102bc565b805460009392916102f36102e9836102ac565b8085529360200190565b9160018116908115610345575060011461030c57505050565b61031f9192939450600052602060002090565b916000925b8184106103315750500190565b805484840152602090930192600101610324565b92949550505060ff1916825215156020020190565b90610123916102d6565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761039c57604052565b610364565b9061014a6103bb926103b260405190565b9384809261035a565b038361037a565b61012390610117565b61012390546103c2565b6101239081565b61012390546103d5565b610123905b60ff1690565b61012390546103e6565b61040690600961027e565b90610410826103a1565b9161041d600182016103cb565b9161042a600283016103cb565b91610437600382016103dc565b916101236005610449600485016103dc565b93016103f1565b60005b8381106104635750506000910152565b8181015183820152602001610453565b61049461049d6020936104a793610488815190565b80835293849260200190565b95869101610450565b601f01601f191690565b0190565b634e487b7160e01b600052602160045260246000fd5b600611156104cb57565b6104ab565b9061014a826104c1565b610123906104d0565b610215906104da565b919695939461054361014a9661053c60a09661052c61051a61054a9760c08a01908a820360008c0152610473565b6001600160a01b03909d166020890152565b6001600160a01b03166040870152565b6060850152565b6080830152565b01906104e3565b34610138576101cc61056c610567366004610244565b6103fb565b9261057c96949692919260405190565b968796876104ec565b6006111561013857565b9050359061014a82610585565b919060408382031261013857610123906105b6818561013d565b9360200161058f565b34610138576101c76105d236600461059c565b90610e40565b610123600060026101fe565b34610138576105f43660046101d0565b6101cc6102346105d8565b610123916008021c610117565b9061012391546105ff565b6101236000600361060c565b34610138576106333660046101d0565b6101cc61063e610617565b604051918291826001600160a01b03909116815260200190565b34610138576106683660046101d0565b6101c7610f44565b908160c09103126101385790565b9060208282031261013857813567ffffffffffffffff8111610138576101239201610670565b34610138576101c76106b736600461067e565b610fff565b906020828203126101385761012391610152565b634e487b7160e01b600052603260045260246000fd5b805482101561070957610700600191600052602060002090565b91020190600090565b6106d0565b600880548210156101385761012391610726916106e6565b9061060c565b34610138576101cc61063e6107423660046106bc565b61070e565b610123600060056101fe565b34610138576107633660046101d0565b6101cc610234610747565b61012360008061060c565b34610138576107893660046101d0565b6101cc61063e61076e565b6101236000600161060c565b34610138576107b03660046101d0565b6101cc61063e610794565b608081830312610138576107cf828261013d565b926101236107e0846020850161013d565b936107ee8160408601610152565b9360600161013d565b34610138576101c761080a3660046107bb565b9291909161123b565b61081e3660046101d0565b6101c76112d9565b9061014a61083360405190565b928361037a565b67ffffffffffffffff811161039c57602090601f01601f19160190565b906108696108648361083a565b610826565b918252565b6108786003610857565b620312e360ec1b602082015290565b61012361086e565b610123610887565b61012361088f565b602080825261012392910190610473565b34610138576108c03660046101d0565b6101cc6108cb610897565b6040519182918261089f565b939291906108e560036103cb565b6108f7335b916001600160a01b031690565b036109055761014a94610979565b60405163605919ad60e11b8152600490fd5b0390fd5b906001600160a01b03905b9181191691161790565b9061094061012361094792610275565b825461091b565b9055565b9060001990610926565b6101236101236101239290565b9061097261012361094792610955565b825461094b565b6109a99261099b61014a9695936109946109a2946000610930565b6001610930565b6002610962565b6003610930565b6004610962565b9061014a949392916108d7565b6109c760036103cb565b6109d0336108ea565b036109055761014a6109e0611389565b6109e8610b03565b61014a6113f7565b156109f757565b60405162461bcd60e51b815260206004820152601060248201526f496e76616c696420646561646c696e6560801b6044820152606490fd5b6101239060081c6103eb565b6101239054610a2f565b15610a4c57565b60405162461bcd60e51b815260206004820152601460248201527315985d5b1d08185b1c9958591e4818db1bdcd95960621b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b91908201809211610aab57565b610a88565b6101176101236101239290565b61012390610ab0565b6040513d6000823e3d90fd5b91908203918211610aab57565b9061ff009060081b610926565b90610afc61012361094792151590565b8254610adf565b610b2142610b1b610b1761012360046103dc565b9190565b116109f0565b610b40610b2e6006610a3b565b610b3a60005b91151590565b14610a45565b610b4a6000610955565b610b546000610955565b80610b64610b1761012360085490565b1015610be957610b8e6005610b886009610b826107268660086106e6565b9061027e565b016103f1565b610ba1610b9b60026104d0565b916104d0565b14610bb4575b600101610b54565b610b54565b90610be1610baf91610bdb6003610bd56009610b8261072660088a906106e6565b016103dc565b90610a9e565b919050610ba7565b50610bf460016103cb565b610c046108ea6101176000610abd565b14610c4f57610c4390610c1f610c1a60016103cb565b610275565b90610c3d610c2d60006103cb565b91610c3860076103dc565b610ad2565b91611468565b61014a60016006610aec565b600080808093610c65610c1a610c1a60036103cb565b828215610c78575bf1610c43575b610ac6565b506108fc610c6d565b61014a6109bd565b90610c9460036103cb565b610c9d336108ea565b036109055761014a91610deb565b9060ff90610926565b90610cc4610123610947926104da565b8254610cab565b80546000939291610ce2610cde836102ac565b9390565b91600181169081156103455750600114610cfb57505050565b610d0e9192939450600052602060002090565b916000925b818410610d205750500190565b805484840152602090930192600101610d13565b9061012391610ccb565b906104a7816020936104e3565b610dc16005610db9610dac610d97610d8a610d6c6101239860008901610d34565b610d7960018901546103c2565b6001600160a01b0316815260200190565b610d7960028801546103c2565b610da460038701546103d5565b815260200190565b610da460048601546103d5565b9201546103e6565b610d3e565b61012391610d4b565b610de590610ddc60405190565b91829182610dc6565b03902090565b610dfc610123610e0692600961027e565b9160058301610cb4565b610e307fdc5800cd986f90adb1f25f5b90f0db543989af9feb77521cc40809e0e7f3cc9f91610dcf565b90610e3a60405190565b600090a2565b9061014a91610c89565b610e52611389565b6109e8610e97565b15610e6157565b60405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642073746174757360901b6044820152606490fd5b610ebd610eaa6005610b8833600961027e565b610eb7610b9b60026104d0565b14610e5a565b610ed560036005610ecf33600961027e565b01610cb4565b610edf60016103cb565b610eef6108ea6101176000610abd565b14610f0f5761014a610f04610c1a60016103cb565b33610c3d60026103dc565b6000808080610f20610c1a33610275565b610f2a60026103dc565b90828215610f3b575bf115610c7357565b506108fc610f33565b61014a610e4a565b610f5660036103cb565b610f5f336108ea565b036109055761014a90610fb6565b3561012381610126565b15610f7e57565b60405162461bcd60e51b815260206004820152601060248201526f223ab83634b1b0ba32b21037b33332b960811b6044820152606490fd5b61014a90610fe6610fd36005610b886009610b8260208701610f6d565b610fe0610b9b60006104d0565b14610f77565b610ffa610ff560208301610f6d565b611512565b61170b565b61014a90610f4c565b6101239060401c6103eb565b6101239054611008565b610123905b67ffffffffffffffff1690565b610123905461101e565b6110236101236101239290565b9067ffffffffffffffff90610926565b6110236101236101239267ffffffffffffffff1690565b9061107e61012361094792611057565b8254611047565b9068ff00000000000000009060401b610926565b906110a961012361094792151590565b8254611085565b6102159061103a565b60208101929161014a91906110b0565b9091926110f37ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b9361110461110086611014565b1590565b9361110e86611030565b8061112a61111c600061103a565b9167ffffffffffffffff1690565b1480611215575b9061113f61111c600161103a565b14806111f2575b90155b90816111e9575b506111d7576111769361116c611166600161103a565b8861106e565b856111c75761121c565b61117d5750565b61118990600090611099565b60016111c27fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916111b960405190565b918291826110b9565b0390a1565b6111d2600188611099565b61121c565b60405163f92ee8a960e01b8152600490fd5b15905038611150565b506111496111ff30610275565b3b61120d610b176000610955565b149050611146565b5085611131565b9161099b6109a29261099461014a96956112346117a6565b6000610930565b9061014a9392916110c9565b1561124e57565b60405162461bcd60e51b815260206004820152601660248201527515985d5b1d08185b1c9958591e4819985d58d95d195960521b6044820152606490fd5b1561129357565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606490fd5b90610cc461012361094792151590565b6112f66112e660066103f1565b6112f06000610b34565b14611247565b61130060016103cb565b6113106108ea6101176000610abd565b1461136057611340611325610c1a60016103cb565b3361132f30610275565b9061133a60026103dc565b926117d2565b61134c600160066112c9565b61014a61135960026103dc565b6007610962565b61137a34611374610b1761012360026103dc565b1461128c565b611340565b6101236002610955565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006113b3816103dc565b6113c1610b1761012361137f565b146113db5761014a9060006113d461137f565b9101610962565b604051633ee5aeb560e01b8152600490fd5b6101236001610955565b61014a7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0060006113d46113ed565b61143e6114386101239263ffffffff1690565b60e01b90565b6001600160e01b03191690565b6001600160a01b03909116815260408101929161014a9160200152565b61014a926004926114ad9161149e9061148463a9059cbb611425565b9261148e60405190565b968794602086019081520161144b565b6020820181038252038361037a565b61180c565b916001600160a01b0360089290920291821b911b610926565b91906114dc61012361094793610275565b9083546114b2565b908154916801000000000000000083101561039c578261150c91600161014a950181556106e6565b906114cb565b61151d8160086114e4565b610e307f1a2323d99020f3db8e6ea85b1eea81e5bf422695877228e3d8a0241d7e957a6c91610275565b903590601e193682900301821215610138570180359067ffffffffffffffff8211610138576020019136829003831361013857565b9160001960089290920291821b911b610926565b91906115a161012361094793610955565b90835461157c565b61014a91600091611590565b8181106115c0575050565b806115ce60006001936115a9565b016115b5565b9190601f81116115e357505050565b6115f561014a93600052602060002090565b906020601f840181900483019310611617575b6020601f9091010401906115b5565b9091508190611608565b919067ffffffffffffffff821161039c576116468261164085546102ac565b856115d4565b600090601f831160011461168157610947929160009183611676575b5050600019600883021c1916906002021790565b013590503880611662565b601f1983169161169685600052602060002090565b9260005b8181106116d4575091600293918560019694106116bb575b50505002019055565b0135600019601f84166008021c191690553880806116b2565b9193602060018192878701358155019501920161169a565b9061014a9291611621565b356101238161014c565b3561012381610585565b610e0661178a60a06117276101236009610b8260208801610f6d565b9361173c6117358280611547565b90876116ec565b61175461174b60408301610f6d565b60028701610930565b61176c611763606083016116f7565b60038701610962565b61178461177b608083016116f7565b60048701610962565b01611701565b60058301610cb4565b61179b6118a8565b61014a61014a6118d3565b61014a611793565b6001600160a01b0391821681529116602082015260608101929161014a9160400152565b61014a9360049391926114ad92909161149e916117f26323b872dd611425565b936117fc60405190565b97889560208701908152016117ae565b90600060209161181a600090565b50828151910182855af115610ac6573d6000519061183b610b176000610955565b03611894575061184a81610275565b3b611858610b176000610955565b145b6118615750565b61186d61091791610275565b604051635274afe760e01b8152918291600483016001600160a01b03909116815260200190565b6118a1610b176001610955565b141561185a565b6118b36111006118db565b6118b957565b604051631afcd79f60e31b8152600490fd5b6109e86118a8565b61014a6118cb565b6101237ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061101456fea164736f6c6343000818000a",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1986,
        "contract": "contracts/CenticVault.sol:CenticVault",
        "label": "sponsor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1988,
        "contract": "contracts/CenticVault.sol:CenticVault",
        "label": "tokenPayout",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1990,
        "contract": "contracts/CenticVault.sol:CenticVault",
        "label": "totalPayout",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1992,
        "contract": "contracts/CenticVault.sol:CenticVault",
        "label": "manager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1994,
        "contract": "contracts/CenticVault.sol:CenticVault",
        "label": "deadline",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1996,
        "contract": "contracts/CenticVault.sol:CenticVault",
        "label": "deadlineClaim",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1999,
        "contract": "contracts/CenticVault.sol:CenticVault",
        "label": "fauceted",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 2002,
        "contract": "contracts/CenticVault.sol:CenticVault",
        "label": "vaultClosed",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 2004,
        "contract": "contracts/CenticVault.sol:CenticVault",
        "label": "balance",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2007,
        "contract": "contracts/CenticVault.sol:CenticVault",
        "label": "members",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2012,
        "contract": "contracts/CenticVault.sol:CenticVault",
        "label": "offers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Offer)2481_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)2467": {
        "encoding": "inplace",
        "label": "enum ICenticVault.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Offer)2481_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICenticVault.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)2481_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Offer)2481_storage": {
        "encoding": "inplace",
        "label": "struct ICenticVault.Offer",
        "members": [
          {
            "astId": 2469,
            "contract": "contracts/CenticVault.sol:CenticVault",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2471,
            "contract": "contracts/CenticVault.sol:CenticVault",
            "label": "member",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2473,
            "contract": "contracts/CenticVault.sol:CenticVault",
            "label": "tokenPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2475,
            "contract": "contracts/CenticVault.sol:CenticVault",
            "label": "amountPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2477,
            "contract": "contracts/CenticVault.sol:CenticVault",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2480,
            "contract": "contracts/CenticVault.sol:CenticVault",
            "label": "status",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(Status)2467"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}